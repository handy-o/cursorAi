# Next-Auth 인증 가이드라인

## 개요

이 프로젝트는 Next-Auth와 Supabase를 사용한 인증 시스템을 구현합니다.

## 인증 플로우

1. 사용자가 로그인 페이지에서 username과 password를 입력
2. Next-Auth Credentials Provider가 요청을 받음
3. Supabase `realAccount` 테이블에서 사용자 정보 조회
4. bcrypt를 사용하여 비밀번호 검증
5. 검증 성공 시 JWT 세션 생성

## 데이터베이스 스키마

### realAccount 테이블

```sql
- id: UUID (Primary Key)
- username: TEXT (Unique, 로그인용 아이디)
- password: TEXT (bcrypt 해시)
- name: TEXT (사용자 이름)
- email: TEXT (Unique)
- is_active: BOOLEAN (계정 활성화 상태)
- created_at: TIMESTAMPTZ
- updated_at: TIMESTAMPTZ
```

## Migration 적용

```bash
# Supabase 대시보드에서 SQL Editor를 열고
# /supabase/migrations/0001_create_real_account_table.sql 파일의 내용을 복사하여 실행
```

## 테스트 계정

기본적으로 다음 테스트 계정이 생성됩니다:

- 관리자: `admin` / `admin1234`
- 일반 사용자: `user` / `user1234`

## 보안 고려사항

1. **비밀번호 해싱**: bcrypt (10 rounds) 사용
2. **Row Level Security (RLS)**: 
   - Service role은 모든 계정 읽기 가능 (인증용)
   - 인증된 사용자는 자신의 계정만 읽기/수정/삭제 가능
3. **세션 관리**: JWT 전략 사용
4. **환경 변수**: 
   - `NEXTAUTH_SECRET`: Next-Auth 시크릿 키
   - `SUPABASE_SERVICE_ROLE_KEY`: Supabase Service Role 키 (인증용)

## 새 계정 추가 방법

### 1. 비밀번호 해시 생성

```bash
node apps/supanovabase/scripts/hash-password.js
```

### 2. Supabase에 직접 추가

```sql
INSERT INTO public."realAccount" (username, password, name, email) 
VALUES ('newuser', '$2a$10$...hashedpassword...', '사용자명', 'user@email.com');
```

## 파일 구조

```
apps/supanovabase/
├── app/
│   ├── api/auth/[...nextauth]/route.ts  # Next-Auth API 라우트
│   └── auth/login-idpw/page.tsx         # 로그인 페이지
├── lib/
│   └── auth.ts                           # Next-Auth 설정
├── src/lib/supabase/
│   ├── client.ts                         # 클라이언트용 Supabase
│   └── server.ts                         # 서버용 Supabase
└── supabase/migrations/
    └── 0001_create_real_account_table.sql  # realAccount 테이블 migration
```

## 코드 예제

### 세션 확인

```typescript
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export default async function Page() {
  const session = await getServerSession(authOptions);
  
  if (!session) {
    redirect('/auth/login-idpw');
  }
  
  return <div>Welcome {session.user.name}</div>;
}
```

### 클라이언트에서 세션 사용

```typescript
'use client';
import { useSession } from 'next-auth/react';

export default function Component() {
  const { data: session, status } = useSession();
  
  if (status === 'loading') return <div>Loading...</div>;
  if (status === 'unauthenticated') return <div>Not logged in</div>;
  
  return <div>Hello {session?.user?.name}</div>;
}
```

## 주의사항

1. 프로덕션 환경에서는 반드시 `NEXTAUTH_SECRET`을 안전하게 설정
2. `SUPABASE_SERVICE_ROLE_KEY`는 서버 사이드에서만 사용 (절대 클라이언트에 노출 금지)
3. 비밀번호는 항상 bcrypt로 해시화하여 저장
4. RLS 정책을 프로젝트 요구사항에 맞게 조정

## 참고 자료

- [Next-Auth Documentation](https://next-auth.js.org/)
- [Supabase Documentation](https://supabase.com/docs)
- [bcrypt Documentation](https://github.com/kelektiv/node.bcrypt.js)
